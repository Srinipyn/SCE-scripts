from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver import ActionChains
from datetime import datetime
from selenium.webdriver.support.ui import Select
import tkinter as tk
from tkinter import messagebox
from tkinter import font,filedialog
import openpyxl
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException, TimeoutException
import math
import pymssql
import datetime
import socket
from http.cookies import Morsel
import time
import requests
import numpy as np
from io import BytesIO
from PIL import Image
import os

def hide_existing_add_new():
    # skus, path of the folders in for each sku
    input_path = file_entry.get()
    selected_options = []

    if checkbox_var1.get() == 1:
        selected_options.append("UAE")
    if checkbox_var2.get() == 1:
        selected_options.append("SAUDI ARABIA")
    if checkbox_var3.get() == 1:
        selected_options.append("USA")
    if checkbox_var4.get() == 1:
        selected_options.append("KUWAIT")
    if checkbox_var5.get() == 1:
        selected_options.append("QATAR")
    if checkbox_var6.get() == 1:
        selected_options.append("OMAN")
    if checkbox_var7.get() == 1:
        selected_options.append("BAHRAIN")

    if selected_options:
        result = selected_options
        print(result)

    else:
        messagebox.showinfo("Selected Options", "No options were selected.")

    options = webdriver.ChromeOptions()  # hide image
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    workbook = openpyxl.load_workbook(input_path)
    sheet = workbook.active
    last_row = sheet.max_row
    userid = user_entry.get()  #
    password = password_entry.get()  #
    link = r'https://adm.eyewa.com/eyewa_adminpanel/admin/index/index/key/d62eebeed3af7adc818bf69150475eb9a1d4988fec3418725e0d57b29226f525/'

    try:
        driver.get(link)
        elementuser = driver.find_element(By.NAME, "login[username]")
        elementuser.send_keys(userid)
        elementpass = driver.find_element(By.NAME, "login[password]")
        elementpass.send_keys(password)

        elementcat = driver.find_element(By.CSS_SELECTOR, "button.action-login.action-primary")
        driver.execute_script("arguments[0].click();", elementcat)
        time.sleep(5)

        # Maximize the browser window
        driver.maximize_window()

        # Locate the top-level 'Catalog' menu item
        catalog_menu_item = driver.find_element(By.CSS_SELECTOR, "li#menu-magento-catalog-catalog > a")
        catalog_menu_item.click()

        # Wait for the submenu to be visible
        time.sleep(2)  # Adjust sleep time as needed for the submenu to appear

        # Locate the 'Categories' submenu item
        categories_menu_item = driver.find_element(By.CSS_SELECTOR, "li.item-catalog-products > a")

        # Click the 'Categories' submenu item
        categories_menu_item.click()

        # pname = userid
        # server = ""
        # port = 19219
        # database = ''
        # username = ''
        # password = ''
        #
        # todaym = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        # process_name = "Magento image operation - Upload image"
        # count = 0
        # manual = 0
        # autoamtion = 0
        # system_id = socket.gethostname()
        # conn = pymssql.connect(server=server, user=username, password=password, database=database, port=port)
        # cursor = conn.cursor()
        # insert_query = "INSERT INTO [dbo].[Automation_usage] (Date, user_name, process_name,count,manual,automation,system_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        # data_to_insert = (todaym, pname, process_name, count, manual, autoamtion, system_id)
        # cursor.execute(insert_query, data_to_insert)
        # conn.commit()
        # processed = 0
        for row_number in range(2, last_row + 1):
            # Extract search input from the first column (assuming column A)
            search_text = sheet.cell(row=row_number, column=1).value

            # # Extract folder path from the second column (assuming column B)
            # folder_patha = sheet.cell(row=row_number, column=2).value
            #
            # # Extract folder path from the second column (assuming column B)
            # folder_pathb = sheet.cell(row=row_number, column=3).value


            # Optionally, wait for some time to observe the result
            time.sleep(5)
            # Wait until the search input field is present and visible
            wait = WebDriverWait(driver, 10)
            search_input = wait.until(EC.visibility_of_element_located((By.ID, 'fulltext')))
            time.sleep(3)
            # Clear the input field
            search_input.clear()

            # Enter new text
            search_input.send_keys(search_text)  # Update with the keyword you want to search for
            time.sleep(3)
            # Press Enter
            search_input.send_keys(Keys.ENTER)
            time.sleep(7)
            # Define maximum retries and delay between retries
            max_retries = 10
            delay_between_retries = 3  # seconds

            # Initialize retry count
            retry_count = 0

            while retry_count < max_retries:
                try:
                    # Wait for the 'Edit' link to become clickable
                    wait = WebDriverWait(driver, 20)
                    edit_link = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, 'Edit')))
                    print("'Edit' link found and clickable. Proceeding with the next steps.")
                    edit_link.click()  # Perform the click action on the 'Edit' link
                    # Add your next steps here
                    break
                except Exception as e:
                    print(f"Attempt {retry_count + 1}: 'Edit' link not found. Retrying...")
                    retry_count += 1
                    time.sleep(delay_between_retries)
            else:
                print("Failed to find 'Edit' link after maximum retries. Proceeding with alternative steps.")
                # Add your alternative steps here if 'Edit' link is not found
            time.sleep(7)
            # Locate the div with the unique data-index="gallery"
            gallery_div = WebDriverWait(driver, 50).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-index="gallery"]'))
            )



            #all store extarction
            button = wait.until(EC.presence_of_element_located((By.ID, "store-change-button")))
            if 'All Store Views' not in button.text:
                wait = WebDriverWait(driver, 10)
                button = wait.until(EC.presence_of_element_located((By.ID, "store-change-button")))
                ActionChains(driver).move_to_element(button).click().perform()

                # Wait for the dropdown options to be present
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".dropdown-menu")))
                time.sleep(1)

            gallery_div = WebDriverWait(driver, 50).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-index="gallery"]'))
            )
            time.sleep(3)
            # Scroll the div into view

            # Locate the div with the unique data-index="gallery" and then click the fieldset title within it
            fieldset_title = WebDriverWait(gallery_div, 50).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, '.fieldset-wrapper-title'))
            )
            fieldset_title.click()
            time.sleep(3)
            # Scroll the div into view
            driver.execute_script("arguments[0].scrollIntoView();", gallery_div)
            time.sleep(3)

            image_wrappers = WebDriverWait(driver, 50).until(
                EC.presence_of_all_elements_located(
                    (By.CSS_SELECTOR, '.image.item:not(.hidden-for-front) .product-image'))
            )

            # Extract image URLs
            image_links = [img.get_attribute('src') for img in image_wrappers]
            comma_separated_links = ', '.join(image_links)

            sheet.cell(row=row_number, column=2, value=comma_separated_links)
            # Print or use the comma-separated links
            print(comma_separated_links)




            #other country view
            col = 3
            # Scroll to the top initially
            driver.execute_script("window.scrollTo(0, 0);")

            # List of country names to search for
            countries_to_select = result  # Add as many countries as you need

            # Loop through each country in the provided list
            # Loop through each country in the provided list
            for country_name in countries_to_select:
                # Scroll to the top initially
                driver.execute_script("window.scrollTo(0, 0);")
                time.sleep(2)
                # Open the dropdown
                button = wait.until(EC.presence_of_element_located((By.ID, "store-change-button")))
                ActionChains(driver).move_to_element(button).click().perform()
                time.sleep(2)
                # Wait for the dropdown to load
                dropdown_menu = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".dropdown-menu")))
                try:
                    print(f"Processing country: {country_name}")

                    # Find the element for the current country
                    country_element = dropdown_menu.find_element(By.XPATH,
                                                                 f"//li[contains(@class, 'store-switcher-website')]//span[text()='{country_name}']")
                    time.sleep(2)
                    # Scroll to the country element to ensure it's visible
                    driver.execute_script("arguments[0].scrollTop = arguments[1].offsetTop;", dropdown_menu,
                                          country_element)
                    time.sleep(2)  # Brief pause to ensure scrolling completes
                    # Scroll to the top initially
                    driver.execute_script("window.scrollTo(0, 0);")
                    time.sleep(2)
                    # Find the next 'English' store view after the current country
                    english_store = country_element.find_element(By.XPATH,
                                                                 "following::li[contains(@class, 'store-switcher-store-view')]//a[contains(text(), 'English')]")

                    # Scroll to and click the English store
                    # driver.execute_script("arguments[0].scrollIntoView(true);", dropdown_menu, english_store)
                    time.sleep(2)
                    # Scroll to the top initially
                    driver.execute_script("window.scrollTo(0, 0);")
                    time.sleep(2)
                    english_store.click()

                    time.sleep(1)

                    # Click the OK button after selecting the store (if applicable)
                    ok_button = wait.until(EC.element_to_be_clickable(
                        (By.CSS_SELECTOR, ".action-primary.action-accept[data-role='action']")))
                    ok_button.click()

                    print(f"Successfully selected English store for {country_name}")

                    # Wait for the page to load by checking for the disappearance of the loading mask
                    wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, ".loading-mask")))
                    print("Page loaded successfully after selection.")

                    time.sleep(1)
                    gallery_div = WebDriverWait(driver, 50).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-index="gallery"]'))
                    )
                    time.sleep(3)
                    # Scroll the div into view

                    # Locate the div with the unique data-index="gallery" and then click the fieldset title within it
                    fieldset_title = WebDriverWait(gallery_div, 50).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, '.fieldset-wrapper-title'))
                    )
                    fieldset_title.click()
                    time.sleep(3)
                    # Scroll the div into view
                    driver.execute_script("arguments[0].scrollIntoView();", gallery_div)
                    time.sleep(3)

                    image_wrappers = WebDriverWait(driver, 50).until(
                        EC.presence_of_all_elements_located(
                            (By.CSS_SELECTOR, '.image.item:not(.hidden-for-front) .product-image'))
                    )

                    # Extract image URLs
                    image_links = [img.get_attribute('src') for img in image_wrappers]
                    comma_separated_links = ', '.join(image_links)

                    print(f"Successfully selected English store for {country_name}")

                except Exception as e:
                    print(f"Error selecting English store for country {country_name}: {str(e)}")

                sheet.cell(row=row_number, column=col, value=comma_separated_links)
                col = col + 1
                workbook.save(input_path)
                # Scroll to the top initially

            driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(1)
            back_button = WebDriverWait(driver, 50).until(EC.element_to_be_clickable((By.ID, "back")))

            # Click the Back button
            back_button.click()

    except Exception as e:
        print(e)

    finally:
        driver.quit()
        messagebox.showerror("status", "Done")





def select_file():
    file_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx; *.xls; *.csv")])
    file_entry.delete(0, tk.END)
    file_entry.insert(tk.END, file_path)

root = tk.Tk()
root.title("Magento Image QC")

# Get the screen width and height
screen_width = 600
screen_height = 500

# Set the window size
root.geometry(f"{screen_width}x{screen_height}")

custom_font = font.Font(family="Helvetica", size=16, weight="bold")

title_label = tk.Label(root, text="Magento Image QC", font=custom_font)
title_label.place(x=100, y=100)

user_label = tk.Label(root, text="Enter Username")
user_label.place(x=100, y=200, anchor="e")
user_entry = tk.Entry(root)
user_entry.place(x=110, y=200)

password_label = tk.Label(root, text="password")
password_label.place(x=100, y=250, anchor="e")
password_entry = tk.Entry(root)
password_entry.place(x=110, y=250)

countries_to_select = ["UAE", "SAUDI ARABIA", "USA", "KUWAIT", "QATAR", "OMAN",
                                   "BAHRAIN"]


# Add a checkbox
checkbox_var1 = tk.IntVar()  # Variable to hold the checkbox state
checkbox1 = tk.Checkbutton(root, text="UAE", variable=checkbox_var1)
checkbox1.place(x=20, y=350)

# Add a checkbox
checkbox_var2 = tk.IntVar()  # Variable to hold the checkbox state
checkbox2 = tk.Checkbutton(root, text="SAUDI ARABIA", variable=checkbox_var2)
checkbox2.place(x=75, y=350)

# Add a checkbox
checkbox_var3 = tk.IntVar()  # Variable to hold the checkbox state
checkbox3 = tk.Checkbutton(root, text="USA", variable=checkbox_var3)
checkbox3.place(x=185, y=350)

# Add a checkbox
checkbox_var4 = tk.IntVar()  # Variable to hold the checkbox state
checkbox4 = tk.Checkbutton(root, text="KUWAIT", variable=checkbox_var4)
checkbox4.place(x=250, y=350)

# Add a checkbox
checkbox_var5 = tk.IntVar()  # Variable to hold the checkbox state
checkbox5 = tk.Checkbutton(root, text="QATAR", variable=checkbox_var5)
checkbox5.place(x=325, y=350)

# Add a checkbox
checkbox_var6 = tk.IntVar()  # Variable to hold the checkbox state
checkbox6 = tk.Checkbutton(root, text="OMAN", variable=checkbox_var6)
checkbox6.place(x=400, y=350)

# Add a checkbox
checkbox_var7 = tk.IntVar()  # Variable to hold the checkbox state
checkbox7 = tk.Checkbutton(root, text="BAHRAIN", variable=checkbox_var7)
checkbox7.place(x=475, y=350)

# Select Files
file_label = tk.Label(root, text="Select File:")
file_label.place(x=20, y=300)
file_entry = tk.Entry(root, width=40)
file_entry.place(x=100, y=300)
file_button = tk.Button(root, text="Browse", command=select_file)
file_button.place(x=400, y=300)

process_button = tk.Button(root, text="Process", command=hide_existing_add_new)
process_button.place(x=200, y=400)

root.mainloop()
