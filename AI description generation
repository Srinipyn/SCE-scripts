import openpyxl
import openai
import tkinter as tk
from tkinter import font, filedialog, messagebox
import datetime
import pymssql
import socket
from tkinter import ttk
import threading

API_KEY = '****'

openai.api_key = API_KEY
model_id = 'gpt-3.5-turbo'

# Initialize conversation with a system message

def select_file():
    file_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx; *.xls; *.csv")])
    file_entry.delete(0, tk.END)
    file_entry.insert(tk.END, file_path)


def start_task():
    thread = threading.Thread(target=Process)
    thread.start()

def ChatGPT_conversation(conversation):
    response = openai.ChatCompletion.create(
        model=model_id,
        messages=conversation
    )
    conversation.append({'role': response.choices[0].message.role, 'content': response.choices[0].message.content})
    return conversation

def Process():
    try:
        file_path = file_entry.get()
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active
        max_row = sheet.max_row - 1

        pname = name_path.get()
        server = "***"
        port = ***
        database = "***"
        username = "***"
        password = "***"
        todaym = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        process_name = "Long description generator"
        count = 0
        manual = 0
        autoamtion = 0
        system_id = socket.gethostname()
        conn = pymssql.connect(server=server, user=username, password=password, database=database, port=port)
        cursor = conn.cursor()
        insert_query = "INSERT INTO [dbo].[Automation_usage] (Date, user_name, process_name,count,manual,automation,system_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        data_to_insert = (todaym, pname, process_name, count, manual, autoamtion, system_id)
        cursor.execute(insert_query, data_to_insert)
        conn.commit()

        processed = 0
        image_count_label.config(text=f"Processed: {processed}/{max_row}")
        progress_step = 100 / max_row
        progress = 0

        for row in range(2, sheet.max_row + 1):
            concatenated_values = ", ".join(
                str(sheet.cell(row=row, column=col).value) if sheet.cell(row=row, column=col).value is not None else ""
                for col in range(2, 12))
            conversation = [{'role': 'system',
                             'content': 'You are a helpful assistant that generates product descriptions. '
                                        'Create a product description for ' +
                                        concatenated_values +
                                        'in less than 200 words and 3 bullet points with 30 words each so that customers want to buy it and the selling points are described '}]

            conversation = ChatGPT_conversation(conversation)
            generated_text1 = '{0}\n'.format(conversation[-1]['content'].strip())
            sheet.cell(row=row, column=3, value=generated_text1)  # Write generated text to column 12
            counts = row + 1

            progress += progress_step
            progress_bar["value"] = progress
            processed += 1
            image_count_label.config(text=f"Processed: {processed}/{max_row}")
            root.update_idletasks()

            workbook.save(file_path)
        workbook.close()

        update_query = "UPDATE Automation_usage SET count = %s WHERE Date = %s and user_name= %s and process_name= %s and system_id=%s"
        update_to_insert = (processed, todaym, pname, process_name, system_id)
        cursor.execute(update_query, update_to_insert)
        conn.commit()

        progress_bar.destroy()
        messagebox.showinfo("Alert", "Processing completed!")

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")
        progress_bar.destroy()


root = tk.Tk()
root.title("Squared Circle Business Tools")

# Get the screen width and height
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# Set the window size
root.geometry(f"{screen_width}x{screen_height}")

# Select Files
file_label = tk.Label(root, text="Select File:")
file_label.place(x=200, y=300)
file_entry = tk.Entry(root, width=40)
file_entry.place(x=350, y=300)
file_button = tk.Button(root, text="Browse", command=select_file)
file_button.place(x=600, y=300)

# character_label = tk.Label(root, text="Prompt", anchor="e")
# character_label.place(x=300, y=350)
# character_entry = tk.Entry(root, width=40)
# character_entry.place(x=350, y=350)

process_button = tk.Button(root, text="Process", command=start_task)
process_button.place(x=350, y=500)

name_label = tk.Label(root, text="Enter Username")
name_label.place(x=300, y=260, anchor="e")
name_path = tk.Entry(root)
name_path.place(x=350, y=250)

image_count_label = tk.Label(root, text="Processed: 0/0")
image_count_label.place(x=350, y=425)

progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate")
root.mainloop()
