import openpyxl
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, PublicAccess, ContentSettings
import os
import tkinter as tk
from tkinter import filedialog
import threading
from PIL import ImageTk, Image
from io import BytesIO
from urllib import request
from tkinter.font import Font
import tkinter.messagebox as messagebox
# upload
connection_string = "api"


def upload():
    path = local_path.get()
    container = container_name.get()
    download = download_path.get()
    if path and container and download:
        status.set("Uploading...")
        threading.Thread(target=upload_images_to_blob_storage, args=(path, container, status, total_images, download)).start()
    else:
        status.set("Please select a folder and enter a container name.")

def create_url():
    container = container_name.get()
    download = download_path.get()
    if container and download:
        threading.Thread(target=download_URLs, args=(container, download)).start()
    else:
        status.set("Please enter a container name and select a download path.")
def upload_images_to_blob_storage(local_path, container_name, status_var, total_images_var,download_path):
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    container_client = blob_service_client.get_container_client(container_name)
    container_client.create_container(public_access=PublicAccess.Blob)
    print(f"Container '{container_name}' created with public access level 'blob' successfully.")

    total_images = len(os.listdir(local_path))
    uploaded_images = 0
    for filename in os.listdir(local_path):
        blob_name = os.path.basename(filename)
        blob_client = container_client.get_blob_client(blob_name)
        content_settings = ContentSettings(content_type="image/jpeg")

        with open(os.path.join(local_path, filename), "rb") as data:
            blob_client.upload_blob(data, overwrite=True, content_settings=content_settings)
            uploaded_images += 1
            status_var.set(f"Uploaded {uploaded_images} out of {total_images} images.")
            total_images_var.set(f"Total Images: {total_images}")
        print(f"Uploaded '{filename}' to '{container_name}' container.")

    container_client = blob_service_client.get_container_client(container_name)
    blobs = container_client.list_blobs()

    image_urls = []

    for blob in blobs:
        blob_url = container_client.url + "/" + blob.name
        image_urls.append(blob_url)

    # Create a new Excel workbook and add the URLs to a worksheet
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = 'URLs'

    for index, url in enumerate(image_urls, start=1):
        sheet.cell(row=index, column=1, value=url)

    # Save the workbook to a file
    file_path = download_path + "/" + container_name + ".xlsx"
    workbook.save(file_path)
    messagebox.showinfo("status", "task completed")
def download_URLs(container_name, download_path):
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    container_client = blob_service_client.get_container_client(container_name)
    blobs = container_client.list_blobs()

    image_urls = []

    for blob in blobs:
        blob_url = container_client.url + "/" + blob.name
        image_urls.append(blob_url)

    # Create a new Excel workbook and add the URLs to a worksheet
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = 'URLs'

    for index, url in enumerate(image_urls, start=1):
        sheet.cell(row=index, column=1, value=url)

    # Save the workbook to a file
    file_path = download_path + "/" + container_name + ".xlsx"
    workbook.save(file_path)
    messagebox.showinfo("status", "task completed")

def browse():
    folder_selected = filedialog.askdirectory()
    local_path.set(folder_selected)
def browsea():
    folder_selected = filedialog.askdirectory()
    download_path.set(folder_selected)


root = tk.Tk()
root.title("Squared Circle Image hosting")

# Get the screen width and height
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# Set the window size
root.geometry(f"{screen_width}x{screen_height}")

# Define the image URL
url = 'https://squaredcircle.in/wp-content/uploads/2022/04/cropped-logo.jpg'
with request.urlopen(url) as response:
    image = response.read()
image = Image.open(BytesIO(image))
# Resize the image if needed
image = image.resize((200, 100))
# Create a Tkinter-compatible photo image
photo = ImageTk.PhotoImage(image)
# Create a label widget to display the image
image_label = tk.Label(root, image=photo)
# Position the label widget
image_label.place(x=70, y=70)

font = Font(size=15, weight="bold", underline=True)
label_path = tk.Label(root, text="Image Hosting", font=font)
label_path.place(x=450, y=70)
label_path = tk.Label(root, text="1.Upload and create button URL will upload and create image URL and give out the links in EXCEL")
label_path.place(x=450, y=100)
label_path = tk.Label(root, text="2.Create URL will button create image URLs for the images already uploaded")
label_path.place(x=450, y=120)
local_path = tk.StringVar()
container_name = tk.StringVar()
status = tk.StringVar()
total_images = tk.StringVar()
download_path = tk.StringVar()

label_path = tk.Label(root, text="Select Local Folder:")
label_path.place(x=325, y=300)
entry_path = tk.Entry(root, textvariable=local_path)
entry_path.place(x=450, y=300, width=300)
browse_button = tk.Button(root, text="Browse", command=browse)
browse_button.place(x=760, y=300)

down_path1 = tk.Label(root, text="Download Path")
down_path1.place(x=325, y=350)
down_path2 = tk.Entry(root, textvariable=download_path)
down_path2.place(x=450, y=350, width=300)
down_path_button = tk.Button(root, text="Browse", command=browsea)
down_path_button.place(x=760, y=350)

label_container = tk.Label(root, text="Enter folder Name:")
label_container.place(x=325, y=400)
entry_container = tk.Entry(root, textvariable=container_name)
entry_container.place(x=450, y=400, width=200)

upload_button = tk.Button(root, text="Upload and create URL", command=upload)
upload_button.place(x=400, y=450)

upload_button1 = tk.Button(root, text="Create URL", command=create_url)
upload_button1.place(x=625, y=450)

status_label = tk.Label(root, textvariable=status)
status_label.place(x=400, y=200)

total_images_label = tk.Label(root, textvariable=total_images)
total_images_label.place(x=625, y=200)

root.mainloop()
