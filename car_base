import requests
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
import os
import pymssql
import socket
from http.cookies import Morsel
import time
import datetime
# Define functions to fetch brands, models, and model data
def get_brands(url):
    try:
        # Fetch the HTML content from the web page
        response = requests.get(url)
        response.raise_for_status()  # Check if the request was successful
        html = response.content

        # Parse the HTML content
        soup = BeautifulSoup(html, 'html.parser')

        # Find the div with the specific class
        dropdown_div = soup.find('div', class_='btn-group dropdown-toggle')

        # Extract all option values within this div
        brands = []
        if dropdown_div:
            select = dropdown_div.find('select', class_='selectpicker')
            if select:
                options = select.find_all('option')
                for option in options:
                    value = option.get('value').strip()
                    if value:  # Ensure the value is not empty
                        brands.append(value)
            else:
                print("Select element not found within the div.")
                messagebox.showinfo("ERROR", "CONTACT AUTOMATION TEAM -- Div with the specified class not found.")
        else:
            print("Div with the specified class not found.")
            messagebox.showinfo("ERROR", "CONTACT AUTOMATION TEAM -- Div with the specified class not found.")

        return brands
    except requests.RequestException as e:
        print(f"An error occurred during the HTTP request: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return []
    except Exception as e:
        print(f"An error occurred: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return []


def get_models(brand):
    pgn = 1
    base_link = f'https://www.carbase.my/search?on_sale=1&make={brand}'

    links = []
    names = []

    try:
        while True:
            link = f'{base_link}&&pg={pgn}'
            print(f"Fetching page {pgn}...")  # Print current page for debugging

            # Fetch the HTML content from the web page
            response = requests.get(link)
            response.raise_for_status()  # Check if the request was successful
            html = response.content

            # Parse the HTML content
            soup = BeautifulSoup(html, 'html.parser')

            # Find the ul with the specific class
            search_results_ul = soup.find('ul', class_='search-results')

            if not search_results_ul or not search_results_ul.find_all('h4', class_='info-title'):
                print("No more search results found.")
                break

            # Extract all href values and names from the a tags within this ul
            for h4 in search_results_ul.find_all('h4', class_='info-title'):
                for a in h4.find_all('a', href=True):
                    links.append(a['href'])
                    names.append(a.get_text(strip=True))

            pgn += 1  # Move to the next page

        print(f"Found {len(links)} models.")
        print("Links:", links)
        print("Names:", names)

        return names, links
    except requests.RequestException as e:
        print(f"An error occurred during the HTTP request: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return [], []
    except Exception as e:
        print(f"An error occurred: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return [], []


def get_model_data(model_url):
    try:
        # Fetch the HTML content from the web page
        linka = f'https://www.carbase.my{model_url}'
        response = requests.get(linka)
        response.raise_for_status()  # Check if the request was successful
        html = response.content

        # Parse the HTML content
        soup = BeautifulSoup(html, 'html.parser')

        # Extract model name and year
        variant_tag = soup.find('h1', id='variant')
        model_name_year = variant_tag.find('span', itemprop='model').text.strip() if variant_tag else 'N/A'

        # Find all table rows
        rows = soup.find_all('tr')

        # Extract table-title and table-value half
        specifications = {'Model': model_name_year}
        column_tracker = {}

        for row in rows:
            title_elements = row.find_all('td', class_='table-title')
            value_elements = row.find_all('td', class_='table-value')
            if title_elements and value_elements:
                for title, value in zip(title_elements, value_elements):
                    title_text = title.text.strip()
                    if title_text == "type":
                        # Incremental naming for "type" columns
                        if title_text in column_tracker:
                            column_tracker[title_text] += 1
                            title_text = f"{title_text} ({column_tracker[title_text]})"
                        else:
                            column_tracker[title_text] = 1
                    elif title_text in column_tracker:
                        continue  # Skip other duplicate columns
                    else:
                        column_tracker[title_text] = 1

                    if value.find('i', class_='fa fa-check text-success'):
                        value_text = "Yes"
                    elif value.find('i', class_='fa fa-times text-danger'):
                        value_text = "No"
                    else:
                        value_text = value.text.strip()
                    specifications[title_text] = value_text

        # Extract color information
        color_table = soup.find('table', class_='table table-color f-s-12 tb-valign-middle m-b-0')
        if color_table:
            color_rows = color_table.find_all('tr')
            colors_info = []
            for color_row in color_rows:
                # Find all <td> elements within the current <tr>
                tds = color_row.find_all('td', class_='col-md-6')

                for td in tds:
                    # Find the <div> with class 'color-title' inside each <td>
                    color_div = td.find('div', class_='color-title')
                    if color_div:
                        color_name = color_div.text.strip()
                        colors_info.append(color_name)

            specifications['Available Colors'] = ', '.join(colors_info)

        return specifications
    except requests.RequestException as e:
        print(f"An error occurred during the HTTP request: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        messagebox.showinfo("ERROR", f"CONTACT AUTOMATION TEAM -- {e}")
        return None


def save_to_excel(data_list, file_path):
    df = pd.DataFrame(data_list)
    df.to_excel(file_path, index=False)
    print(f"Data saved to {file_path}")


# Define function to update models treeview based on the selected brand
def update_models(*args):
    selected_brand = brand_var.get()
    names, links = get_models(selected_brand)
    # Clear existing rows
    for item in model_tree.get_children():
        model_tree.delete(item)
    # Insert new rows
    for name, link in zip(names, links):
        model_tree.insert('', 'end', text=name, tags=(link,))


# Define function to fetch and display model data
def display_model_data():
    selected_models = model_tree.selection()

    if not selected_models:
        messagebox.showwarning("Selection Error", "Please select a model.")
        return
    all_specifications = []
    count = len(selected_models)
    pname = "Mudha"
    server = ""
    port = 19219
    database = ""
    username = ""
    password = ""
    todaym = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    process_name = "Car Base"
    manual = 0
    automation = 0
    system_id = socket.gethostname()
    conn = pymssql.connect(server=server, user=username, password=password, database=database, port=port)
    cursor = conn.cursor()
    insert_query = "INSERT INTO [dbo].[Automation_usage] (Date, user_name, process_name,count,manual,automation,system_id) VALUES (%s, %s, %s, %s, %s, %s, %s)"
    data_to_insert = (todaym, pname, process_name, count, manual, automation, system_id)
    cursor.execute(insert_query, data_to_insert)
    conn.commit()
    for model_item in selected_models:
        model_url = model_tree.item(model_item, "tags")[0]
        specifications = get_model_data(model_url)

        if specifications:
            all_specifications.append(specifications)
    if all_specifications:
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                                 filetypes=[("Excel files", "*.xlsx"),
                                                            ("All files", "*.*")])
        if file_path:
            save_to_excel(all_specifications, file_path)
            messagebox.showinfo("Success", f"Data saved to {file_path}")


# Set up the main application window
root = tk.Tk()
root.title("Car Model Selector")
root.geometry("800x400")  # Set the window size

# Fetch and set up brands dropdown
url = r"https://www.carbase.my/"
brands = get_brands(url)
brand_var = tk.StringVar()
brand_dropdown = ttk.Combobox(root, textvariable=brand_var, values=brands)
brand_dropdown.place(x=150, y=20, width=200, height=30)
brand_dropdown.bind("<<ComboboxSelected>>", update_models)
tk.Label(root, text="Select Brand:").place(x=50, y=20, width=100, height=30)

# Set up models treeview with scrollbar
tree_frame = ttk.Frame(root)
tree_frame.place(x=50, y=60, width=600, height=200)
tree_scroll = ttk.Scrollbar(tree_frame)
tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

model_tree = ttk.Treeview(tree_frame, columns=("Model"), show="tree", selectmode="extended",
                          yscrollcommand=tree_scroll.set)
model_tree.pack(fill=tk.BOTH, expand=True)
tree_scroll.config(command=model_tree.yview)


# Add a button to fetch and display model data
fetch_button = tk.Button(root, text="Fetch Model Data", command=display_model_data)
fetch_button.place(x=150, y=280, width=200, height=30)

# Run the application
root.mainloop()
